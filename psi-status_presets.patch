Index: src/common.cpp
===================================================================
RCS file: /psi/psi/src/common.cpp,v
retrieving revision 1.103
diff -u -r1.103 common.cpp
--- psi/src/common.cpp	11 Jul 2004 08:30:54 -0000	1.103
+++ psi/src/common.cpp	21 Aug 2004 12:21:58 -0000
@@ -1476,6 +1476,13 @@
 #endif
 }
 
+XMPP::Status makeStatus(int x, const QString &str, int priority)
+{
+	XMPP::Status s = makeStatus(x,str);
+	s.setPriority(priority);
+	return s;
+}
+
 XMPP::Status makeStatus(int x, const QString &str)
 {
 	XMPP::Status s;
@@ -1743,5 +1750,148 @@
 	}
 
 	return false;
+}
+
+
+//-----------------------------------------------------------------------------
+// StatusPreset
+//-----------------------------------------------------------------------------
+//
+
+Options::StatusPreset::StatusPreset()
+:  name_(""), message_(""), status_(STATUS_AWAY)
+{
+	clearPriority();
+}
+
+Options::StatusPreset::StatusPreset(QString name, QString message, int status) 
+:  name_(name), message_(message), status_(status)
+{
+	clearPriority();
+}
+
+Options::StatusPreset::StatusPreset(QString name, int priority, QString message, int status)
+:  name_(name), message_(message), status_(status)
+{
+	setPriority(priority);
+}
+
+Options::StatusPreset::StatusPreset(const QDomElement& el)
+:  name_(""), message_(""), status_(STATUS_AWAY)
+{
+	clearPriority();
+	fromXml(el);
+}
+
+QString Options::StatusPreset::name() const
+{
+	return name_;
+}
+
+void Options::StatusPreset::setName(const QString& name)
+{
+	name_ = name;
+}
+
+QString Options::StatusPreset::message() const
+{
+	return message_;
+}
+
+void Options::StatusPreset::setMessage(const QString& message)
+{
+	message_ = message;
+}
+
+int Options::StatusPreset::status() const
+{
+	return status_;
+}
+
+void Options::StatusPreset::setStatus(int status)
+{
+	status_ = status;
+}
+
+bool Options::StatusPreset::usePriority() const
+{
+	return usePriority_;
+}
+
+int Options::StatusPreset::priority() const
+{
+	return priority_;
+}
+
+void Options::StatusPreset::setPriority(int priority)
+{
+	priority_ = priority;
+	usePriority_ = true;
+}
+
+void Options::StatusPreset::clearPriority() 
+{
+	priority_ = -1;
+	usePriority_ = false;
+}
+
+QDomElement Options::StatusPreset::toXml(QDomDocument& doc) const
+{
+	QDomElement preset = doc.createElement("preset");
+	QDomText text = doc.createTextNode(message());
+	preset.appendChild(text);
+							
+	preset.setAttribute("name",name());
+	if (usePriority()) 
+		preset.setAttribute("priority", priority());
+	QString stat;
+	switch(status()) {
+		case STATUS_OFFLINE: stat = "offline"; break;
+		case STATUS_ONLINE: stat = "online"; break;
+		case STATUS_AWAY: stat = "away"; break;
+		case STATUS_XA: stat = "xa"; break;
+		case STATUS_DND: stat = "dnd"; break;
+		case STATUS_INVISIBLE: stat = "invisible"; break;
+		case STATUS_CHAT: stat = "chat"; break;
+		default: stat = "away";
+	}
+	preset.setAttribute("status", stat);
+	return preset;
+}
+
+void Options::StatusPreset::fromXml(const QDomElement &el)
+{
+	// FIXME: This is the old format. Should be removed in the future
+	if (el.tagName() == "item") {
+		setName(el.attribute("name"));
+		setMessage(el.text());
+		return;
+	}
+
+	if (el.isNull() || el.tagName() != "preset")
+		return;
+
+	setName(el.attribute("name"));
+	setMessage(el.text());
+	if (el.hasAttribute("priority")) 
+		setPriority(el.attribute("priority").toInt());
+	
+	QString stat = el.attribute("status","away");
+	if (stat == "offline")
+		setStatus(STATUS_OFFLINE);
+	else if (stat == "online")
+		setStatus(STATUS_ONLINE);
+	else if (stat == "away")
+		setStatus(STATUS_AWAY);
+	else if (stat == "xa")
+		setStatus(STATUS_XA);
+	else if (stat == "dnd")
+		setStatus(STATUS_DND);
+	else if (stat == "invisible")
+		setStatus(STATUS_INVISIBLE);
+	else if (stat == "chat")
+		setStatus(STATUS_CHAT);
+	else 
+		setStatus(STATUS_AWAY);
 }
 
Index: src/common.h
===================================================================
RCS file: /psi/psi/src/common.h,v
retrieving revision 1.68
diff -u -r1.68 common.h
--- psi/src/common.h	18 Aug 2004 01:35:35 -0000	1.68
+++ psi/src/common.h	21 Aug 2004 12:21:58 -0000
@@ -261,6 +291,7 @@
 
 void soundPlay(const QString &);
 
+XMPP::Status makeStatus(int, const QString &, int priority);
 XMPP::Status makeStatus(int, const QString &);
 int makeSTATUS(const XMPP::Status &);
 
Index: src/mainwin.cpp
===================================================================
RCS file: /psi/psi/src/mainwin.cpp,v
retrieving revision 1.87
diff -u -r1.87 mainwin.cpp
--- psi/src/mainwin.cpp	18 Aug 2004 01:07:03 -0000	1.87
+++ psi/src/mainwin.cpp	21 Aug 2004 12:21:59 -0000
@@ -719,7 +719,7 @@
 	d->getAction("menu_quit")->addTo(d->trayMenu);
 }
 
-void MainWin::setTrayToolTip(int status)
+void MainWin::setTrayToolTip(int status, bool)
 {
 	if (!d->tray)
 		return;
Index: src/mainwin.h
===================================================================
RCS file: /psi/psi/src/mainwin.h,v
retrieving revision 1.35
diff -u -r1.35 mainwin.h
--- psi/src/mainwin.h	15 Aug 2004 12:22:19 -0000	1.35
+++ psi/src/mainwin.h	21 Aug 2004 12:21:59 -0000
@@ -86,7 +86,7 @@
 	void buildTrayMenu();
 	void buildMainMenu();
 
-	void setTrayToolTip(int);
+	void setTrayToolTip(int,bool usePriority = false);
 
 	void activatedStatusAction(int);
 
Index: src/psi_profiles.cpp
===================================================================
RCS file: /psi/psi/src/psi_profiles.cpp,v
retrieving revision 1.36
diff -u -r1.36 psi_profiles.cpp
--- psi/src/psi_profiles.cpp	18 Aug 2004 01:35:35 -0000	1.36
+++ psi/src/psi_profiles.cpp	21 Aug 2004 12:22:00 -0000
@@ -396,17 +396,29 @@
 	prefs.showGroupCounts = true;
 	prefs.smallChats = false;
 
+	// Status presets
 	prefs.sp.clear();
-	prefs.sp.set(QObject::tr("Away from desk"), QObject::tr("I am away from my desk.  Leave a message."));
-	prefs.sp.set(QObject::tr("Showering"), QObject::tr("I'm in the shower.  You'll have to wait for me to get out."));
-	prefs.sp.set(QObject::tr("Eating"), QObject::tr("Out eating.  Mmmm.. food."));
-	prefs.sp.set(QObject::tr("Sleep"), QObject::tr("Sleep is good.  Zzzzz"));
-	prefs.sp.set(QObject::tr("Work"), QObject::tr("Can't chat.  Gotta work."));
-	prefs.sp.set(QObject::tr("Air"), QObject::tr("Stepping out to get some fresh air."));
-	prefs.sp.set(QObject::tr("Movie"), QObject::tr("Out to a movie.  Is that OK with you?"));
-	prefs.sp.set(QObject::tr("Secret"), QObject::tr("I'm not available right now and that's all you need to know."));
-	prefs.sp.set(QObject::tr("Out for the night"), QObject::tr("Out for the night."));
-	prefs.sp.set(QObject::tr("Greece"), QObject::tr("I have gone to a far away place.  I will be back someday!"));
+	QString name;
+	name = QObject::tr("Away from desk");
+	prefs.sp[name] = Options::StatusPreset(name, QObject::tr("I am away from my desk.  Leave a message."), STATUS_AWAY);;
+	name = QObject::tr("Showering");
+	prefs.sp[name] = Options::StatusPreset(name, QObject::tr("I'm in the shower.  You'll have to wait for me to get out."), STATUS_AWAY);
+	name = QObject::tr("Eating");
+	prefs.sp[name] = Options::StatusPreset(name, QObject::tr("Out eating.  Mmmm.. food."), STATUS_AWAY);
+	name = QObject::tr("Sleep");
+	prefs.sp[name] = Options::StatusPreset(name, QObject::tr("Sleep is good.  Zzzzz"),STATUS_DND);
+	name = QObject::tr("Work");
+	prefs.sp[name] = Options::StatusPreset(name, QObject::tr("Can't chat.  Gotta work."), STATUS_DND);
+	name = QObject::tr("Air");
+	prefs.sp[name] = Options::StatusPreset(name, QObject::tr("Stepping out to get some fresh air."), STATUS_AWAY);
+	name = QObject::tr("Movie");
+	prefs.sp[name] = Options::StatusPreset(name, QObject::tr("Out to a movie.  Is that OK with you?"), STATUS_AWAY);
+	name = QObject::tr("Secret");
+	prefs.sp[name] = Options::StatusPreset(name, QObject::tr("I'm not available right now and that's all you need to know."), STATUS_XA);
+	name = QObject::tr("Out for the night");
+	prefs.sp[name] = Options::StatusPreset(name, QObject::tr("Out for the night."), STATUS_AWAY);
+	name = QObject::tr("Greece");
+	prefs.sp[name] = Options::StatusPreset(name, QObject::tr("I have gone to a far away place.  I will be back someday!"), STATUS_XA);
 	prefs.recentStatus.clear();
 
 	prefs.color[cOnline]    = QColor("#0060C0");
@@ -839,7 +851,13 @@
 			tag.appendChild(textTag(doc, "message", prefs.asMessage));
 		}
 		{
-			p_pres.appendChild(prefs.sp.toXml(doc, "statuspresets"));
+			// Status presets
+			QDomElement p_statuspresets = doc.createElement("statuspresets");
+			p_pres.appendChild(p_statuspresets);
+
+			QMap<QString,Options::StatusPreset>::ConstIterator it = prefs.sp.begin();
+			for ( ; it != prefs.sp.end(); ++it ) 
+				p_statuspresets.appendChild(it.data().toXml(doc));
 		}
 		{
 			p_pres.appendChild(stringListToXml(doc, "recentstatus",prefs.recentStatus));
Index: src/psiaccount.cpp
===================================================================
RCS file: /psi/psi/src/psiaccount.cpp,v
retrieving revision 1.163
diff -u -r1.163 psiaccount.cpp
--- psi/src/psiaccount.cpp	18 Aug 2004 01:35:35 -0000	1.163
+++ psi/src/psiaccount.cpp	21 Aug 2004 12:22:03 -0000
@@ -1589,7 +1589,7 @@
 	return d->loginStatus;
 }
 
-void PsiAccount::setStatus(const Status &_s)
+void PsiAccount::setStatus(const Status &_s, bool withPriority)
 {
 	// Block all transports' contacts' status change popups from popping
 	{
@@ -1606,7 +1606,9 @@
 	doReconnect = false;
 
 	Status s = _s;
-	s.setPriority(d->acc.priority);
+
+	if (!withPriority)
+		s.setPriority(d->acc.priority);
 
 	d->loginStatus = s;
 
@@ -1642,7 +1644,7 @@
 		// change status
 		else {
 			if(rosterDone)
-				setStatusDirect(s);
+				setStatusDirect(s, withPriority);
 
 			if(s.isInvisible()) {//&&Pass invis to transports KEVIN
 				//this is a nasty hack to let the transports know we're invisible, since they get an offline packet when we go invisible
@@ -1663,10 +1665,12 @@
 	}
 }
 
-void PsiAccount::setStatusDirect(const Status &_s)
+void PsiAccount::setStatusDirect(const Status &_s, bool withPriority)
 {
 	Status s = _s;
-	s.setPriority(d->acc.priority);
+
+	if (!withPriority)
+		s.setPriority(d->acc.priority);
 
 	if(s.status().isEmpty())
 		s.setStatus(status2txt(makeSTATUS(s)));
@@ -2180,7 +2184,7 @@
 		}
 		else {
 			StatusSetDlg *w = new StatusSetDlg(this, makeStatus(x, ""));
-			connect(w, SIGNAL(set(const Status &)), SLOT(setStatus(const Status &)));
+			connect(w, SIGNAL(set(const Status &, bool)), SLOT(setStatus(const Status &, bool)));
 			w->show();
 		}
 	}
Index: src/psiaccount.h
===================================================================
RCS file: /psi/psi/src/psiaccount.h,v
retrieving revision 1.41
diff -u -r1.41 psiaccount.h
--- psi/src/psiaccount.h	18 Aug 2004 01:35:35 -0000	1.41
+++ psi/src/psiaccount.h	21 Aug 2004 12:22:03 -0000
@@ -151,7 +151,7 @@
 	//AvatarFactory *avatarFactory() const;
 
 	Status status() const;
-	void setStatusDirect(const Status &);
+	void setStatusDirect(const Status &, bool withPriority = false);
 	void setStatusActual(const Status &);
 	void login();
 	void logout(bool fast=false, const Status &s = Status("", "Logged out", 0, false));
@@ -218,7 +218,7 @@
 	void encryptedMessageSent(int, bool);
 
 public slots:
-	void setStatus(const Status &);
+	void setStatus(const Status &, bool withStatus = false);
 
 	void secondsIdle(int);
 	void openNextEvent();
Index: src/psicon.cpp
===================================================================
RCS file: /psi/psi/src/psicon.cpp,v
retrieving revision 1.93
diff -u -r1.93 psicon.cpp
--- psi/src/psicon.cpp	4 Aug 2004 03:20:43 -0000	1.93
+++ psi/src/psicon.cpp	21 Aug 2004 12:22:04 -0000
@@ -822,7 +822,7 @@
 				str = d->lastStatusString; // default to old away message
 
 			StatusSetDlg *w = new StatusSetDlg(this, makeStatus(x, str));
-			connect(w, SIGNAL(set(const Status &)), SLOT(setStatusFromDialog(const Status &)));
+			connect(w, SIGNAL(set(const Status &, bool)), SLOT(setStatusFromDialog(const Status &, bool)));
 			connect(w, SIGNAL(cancelled()), SLOT(updateMainwinStatus()));
 			if(option.useDock == true)
 				connect(w, SIGNAL(set(const Status &)), d->mainwin, SLOT(setTrayToolTip(const Status &)));
@@ -831,13 +831,13 @@
 	}
 }
 
-void PsiCon::setStatusFromDialog(const Status &s)
+void PsiCon::setStatusFromDialog(const Status &s, bool withPriority)
 {
 	d->lastStatusString = s.status();
-	setGlobalStatus(s);
+	setGlobalStatus(s, withPriority);
 }
 
-void PsiCon::setGlobalStatus(const Status &s)
+void PsiCon::setGlobalStatus(const Status &s, bool withPriority)
 {
 	// Check whether all accounts are logged off
 	bool allOffline = true;
@@ -854,7 +854,7 @@
 	PsiAccountListIt it(d->listEnabled);
 	for( ; (pa = it.current()); ++it)
 		if (allOffline || pa->isActive())
-			pa->setStatus(s);
+			pa->setStatus(s, withPriority);
 }
 
 void PsiCon::pa_updatedActivity()
Index: src/psicon.h
===================================================================
RCS file: /psi/psi/src/psicon.h,v
retrieving revision 1.32
diff -u -r1.32 psicon.h
--- psi/src/psicon.h	4 Aug 2004 03:20:43 -0000	1.32
+++ psi/src/psicon.h	21 Aug 2004 12:22:04 -0000
@@ -142,7 +142,7 @@
 	void pgpKeysUpdated();
 
 public slots:
-	void setGlobalStatus(const Status &);
+	void setGlobalStatus(const Status &, bool withPriority = false);
 	QWidget *doToolbars();
 
 private slots:
@@ -159,7 +159,7 @@
 	void slotApplyOptions(const Options &);
 	void queueChanged();
 	void recvNextEvent();
-	void setStatusFromDialog(const Status &);
+	void setStatusFromDialog(const Status &, bool withPriority);
 	void pgp_initFinished(bool, const QString &);
 	void pgp_keysUpdated();
 	void proxy_settingsChanged();
Index: src/statusdlg.cpp
===================================================================
RCS file: /psi/psi/src/statusdlg.cpp,v
retrieving revision 1.9
diff -u -r1.9 statusdlg.cpp
--- psi/src/statusdlg.cpp	18 Jul 2004 10:47:33 -0000	1.9
+++ psi/src/statusdlg.cpp	21 Aug 2004 12:22:04 -0000
@@ -77,6 +77,7 @@
 	Status s;
 	ChatView *te;
 	QComboBox *cb_type, *cb_preset;
+	QLineEdit *le_priority;
 	QCheckBox *save;
 };
 
@@ -109,12 +110,27 @@
 void StatusSetDlg::init()
 {
 	int type = makeSTATUS(d->s);
+	QLabel *l;
 
 	// build the dialog
 	QVBoxLayout *vb = new QVBoxLayout(this, 8);
 	QHBoxLayout *hb1 = new QHBoxLayout(vb);
 
-	QLabel *l;
+	// Status presets
+	l = new QLabel(tr("Preset:"), this);
+	hb1->addWidget(l);
+	d->cb_preset = new QComboBox(this);
+	d->cb_preset->insertItem(tr("<None>"));
+	QStringList presets;
+	QMap<QString,Options::StatusPreset>::ConstIterator it = option.sp.begin();
+	for ( ; it != option.sp.end(); ++it ) 
+		presets += it.data().name();
+	presets.sort();
+	d->cb_preset->insertStringList(presets);
+	connect(d->cb_preset, SIGNAL(highlighted(int)), SLOT(chooseStatusPreset(int)));
+	hb1->addWidget(d->cb_preset,3);
+
+	// Status
 	l = new QLabel(tr("Status:"), this);
 	hb1->addWidget(l);
 	d->cb_type = new QComboBox(this);
@@ -127,16 +143,13 @@
 			break;
 		}
 	}
-	hb1->addWidget(d->cb_type,1);
-	l = new QLabel(tr("Preset:"), this);
+	hb1->addWidget(d->cb_type,3);
+
+	// Priority
+	l = new QLabel(tr("Priority:"), this);
 	hb1->addWidget(l);
-	d->cb_preset = new QComboBox(this);
-	d->cb_preset->insertItem(tr("<None>"));
-	QStringList presets=option.sp.varsToStringList();
-	presets.sort();
-	d->cb_preset->insertStringList(presets);
-	connect(d->cb_preset, SIGNAL(highlighted(int)), SLOT(chooseStatusPreset(int)));
-	hb1->addWidget(d->cb_preset,1);
+	d->le_priority = new QLineEdit(this);
+	hb1->addWidget(d->le_priority,1);
 
 	d->te = new ChatView(this);
 	d->te->setReadOnly(false);
@@ -205,7 +218,7 @@
 				QMessageBox::information(this, tr("Error"), 
 					tr("Can't create a blank preset!"));
 			}
-			else if(option.sp.findByKey(text) != option.sp.end()) {
+			else if(option.sp.contains(text)) {
 				QMessageBox::information(this, tr("Error"), 
 					tr("You already have a preset with that name!"));
 			}
@@ -229,7 +249,20 @@
 	if(x < 1)
 		return;
 
-	d->te->setText(option.sp.get(d->cb_preset->text(x)));
+	Options::StatusPreset preset = option.sp[d->cb_preset->text(x)];
+	d->te->setText(preset.message());
+	if (preset.usePriority()) 
+		d->le_priority->setText(QString::number(preset.priority()));
+	else
+		d->le_priority->clear();
+
+	int n;
+	for(n = 0; n < 7; ++n) {
+		if(preset.status() == combomap[n]) {
+			d->cb_type->setCurrentItem(n);
+			break;
+		}
+	}
 }
 
 void StatusSetDlg::cancel()
Index: src/statusdlg.h
===================================================================
RCS file: /psi/psi/src/statusdlg.h,v
retrieving revision 1.5
diff -u -r1.5 statusdlg.h
--- psi/src/statusdlg.h	22 Oct 2003 11:40:38 -0000	1.5
+++ psi/src/statusdlg.h	21 Aug 2004 12:22:04 -0000
@@ -49,7 +49,7 @@
 	void keyPressEvent(QKeyEvent *);
 
 signals:
-	void set(const Status &);
+	void set(const Status &, bool withPriority);
 	void cancelled();
 
 private slots:
Index: src/options/opt_status-ui.ui
===================================================================
RCS file: /psi/psi/src/options/opt_status-ui.ui,v
retrieving revision 1.7
diff -u -r1.7 opt_status-ui.ui
--- psi/src/options/opt_status-ui.ui	18 Jul 2004 12:02:36 -0000	1.7
+++ psi/src/options/opt_status-ui.ui	21 Aug 2004 12:22:05 -0000
@@ -1,4 +1,4 @@
-<!DOCTYPE UI><UI version="3.1" stdsetdef="1">
+<!DOCTYPE UI><UI version="3.3" stdsetdef="1">
 <class>OptStatusUI</class>
 <widget class="QWidget">
     <property name="name">
@@ -8,8 +8,8 @@
         <rect>
             <x>0</x>
             <y>0</y>
-            <width>300</width>
-            <height>418</height>
+            <width>308</width>
+            <height>480</height>
         </rect>
     </property>
     <property name="caption">
@@ -186,13 +186,13 @@
                 </property>
                 <widget class="QLayoutWidget">
                     <property name="name">
-                        <cstring>layout29</cstring>
+                        <cstring>layout33</cstring>
                     </property>
                     <grid>
                         <property name="name">
                             <cstring>unnamed</cstring>
                         </property>
-                        <widget class="QListBox" row="0" column="0" rowspan="3" colspan="1">
+                        <widget class="QListBox" row="0" column="0" rowspan="2" colspan="1">
                             <property name="name">
                                 <cstring>lb_sp</cstring>
                             </property>
@@ -200,8 +200,8 @@
                                 <sizepolicy>
                                     <hsizetype>7</hsizetype>
                                     <vsizetype>7</vsizetype>
-                                    <horstretch>0</horstretch>
-                                    <verstretch>0</verstretch>
+                                    <horstretch>3</horstretch>
+                                    <verstretch>1</verstretch>
                                 </sizepolicy>
                             </property>
                             <property name="maximumSize">
@@ -211,7 +211,7 @@
                                 </size>
                             </property>
                         </widget>
-                        <widget class="QPushButton" row="0" column="1">
+                        <widget class="QPushButton" row="0" column="2">
                             <property name="name">
                                 <cstring>pb_spNew</cstring>
                             </property>
@@ -219,24 +219,68 @@
                                 <string>New</string>
                             </property>
                         </widget>
-                        <spacer row="1" column="1">
+                        <widget class="QLayoutWidget" row="1" column="1">
                             <property name="name">
-                                <cstring>Spacer6</cstring>
-                            </property>
-                            <property name="orientation">
-                                <enum>Vertical</enum>
+                                <cstring>layout31</cstring>
                             </property>
-                            <property name="sizeType">
-                                <enum>Maximum</enum>
+                            <hbox>
+                                <property name="name">
+                                    <cstring>unnamed</cstring>
+                                </property>
+                                <spacer>
+                                    <property name="name">
+                                        <cstring>spacer4</cstring>
+                                    </property>
+                                    <property name="orientation">
+                                        <enum>Horizontal</enum>
+                                    </property>
+                                    <property name="sizeType">
+                                        <enum>Expanding</enum>
+                                    </property>
+                                    <property name="sizeHint">
+                                        <size>
+                                            <width>40</width>
+                                            <height>20</height>
+                                        </size>
+                                    </property>
+                                </spacer>
+                                <widget class="QLabel">
+                                    <property name="name">
+                                        <cstring>textLabel1</cstring>
+                                    </property>
+                                    <property name="text">
+                                        <string>Priority:</string>
+                                    </property>
+                                </widget>
+                                <widget class="QLineEdit">
+                                    <property name="name">
+                                        <cstring>le_sp_priority</cstring>
+                                    </property>
+                                    <property name="sizePolicy">
+                                        <sizepolicy>
+                                            <hsizetype>7</hsizetype>
+                                            <vsizetype>0</vsizetype>
+                                            <horstretch>1</horstretch>
+                                            <verstretch>0</verstretch>
+                                        </sizepolicy>
+                                    </property>
+                                </widget>
+                            </hbox>
+                        </widget>
+                        <widget class="QComboBox" row="0" column="1">
+                            <property name="name">
+                                <cstring>cb_sp_status</cstring>
                             </property>
-                            <property name="sizeHint">
-                                <size>
-                                    <width>16</width>
-                                    <height>0</height>
-                                </size>
+                            <property name="sizePolicy">
+                                <sizepolicy>
+                                    <hsizetype>7</hsizetype>
+                                    <vsizetype>0</vsizetype>
+                                    <horstretch>2</horstretch>
+                                    <verstretch>0</verstretch>
+                                </sizepolicy>
                             </property>
-                        </spacer>
-                        <widget class="QPushButton" row="2" column="1">
+                        </widget>
+                        <widget class="QPushButton" row="1" column="2">
                             <property name="name">
                                 <cstring>pb_spDelete</cstring>
                             </property>
Index: src/options/opt_status.cpp
===================================================================
RCS file: /psi/psi/src/options/opt_status.cpp,v
retrieving revision 1.4
diff -u -r1.4 opt_status.cpp
--- psi/src/options/opt_status.cpp	18 Jul 2004 10:47:33 -0000	1.4
+++ psi/src/options/opt_status.cpp	21 Aug 2004 12:22:05 -0000
@@ -18,6 +18,8 @@
 // OptionsTabStatus
 //----------------------------------------------------------------------------
 
+static int combomap[7] = { STATUS_CHAT, STATUS_ONLINE, STATUS_AWAY, STATUS_XA, STATUS_DND, STATUS_INVISIBLE, STATUS_OFFLINE };
+
 OptionsTabStatus::OptionsTabStatus(QObject *parent)
 : OptionsTab(parent, "status", "", tr("Status"), tr("Status preferences"), "status/online")
 {
@@ -56,6 +58,7 @@
 		tr("Specifies an extended message to use if you allow Psi"
 		" to set your status automatically.  See options above."));
 
+	// Status presets
 	d->pb_spNew->setEnabled(TRUE);
 	d->pb_spDelete->setEnabled(FALSE);
 	d->te_sp->setEnabled(FALSE);
@@ -63,6 +66,12 @@
 	connect(d->pb_spDelete, SIGNAL(clicked()), SLOT(removeStatusPreset()));
 	connect(d->lb_sp, SIGNAL(highlighted(int)), SLOT(selectStatusPreset(int)));
 	connect(d->te_sp, SIGNAL(textChanged()), SLOT(changeStatusPreset()));
+	connect(d->le_sp_priority, SIGNAL(textChanged(const QString&)), SLOT(changeStatusPreset()));
+	connect(d->cb_sp_status, SIGNAL(activated(int)), SLOT(changeStatusPreset()));
+	
+	int n;
+	for(n = 0; n < 7; ++n)
+		d->cb_sp_status->insertItem(status2txt(combomap[n]));
 
 	QWhatsThis::add(d->pb_spNew,
 		tr("Press this button to create a new status message preset."));
@@ -74,7 +83,11 @@
 	QWhatsThis::add(d->te_sp,
 		tr("You may edit the message here for the currently selected"
 		" status message preset in the list to the above."));
-
+	QWhatsThis::add(d->cb_sp_status,
+		tr("Use this to choose the status that will be assigned to this preset"));
+	QWhatsThis::add(d->le_sp_priority,
+		tr("Fill in the priority that will be assigned to this preset."
+		   " If no priority is given, the default account priority will be used."));
 	QWhatsThis::add(d->ck_askOnline,
 		tr("Jabber allows you to put extended status messages on"
 		" all status types.  Normally, Psi does not prompt you for"
@@ -131,7 +144,11 @@
 
 	o->sp = opt->sp;
 	d->lb_sp->clear();
-	d->lb_sp->insertStringList(o->sp.varsToStringList());
+	QStringList presets;
+	QMap<QString,Options::StatusPreset>::ConstIterator it = option.sp.begin();	
+	for ( ; it != option.sp.end(); ++it ) 
+		presets += it.key();
+	d->lb_sp->insertStringList(presets);
 	if(d->lb_sp->count() >= 1)
 		d->lb_sp->setSelected(0, TRUE);
 
@@ -150,23 +167,43 @@
 
 	//noDirty = TRUE;
 	disconnect(d->te_sp, SIGNAL(textChanged()), 0, 0);
+	disconnect(d->le_sp_priority, SIGNAL(textChanged(const QString&)), 0, 0);
 	if ( x == -1 ) {
 		d->pb_spDelete->setEnabled(false);
 		d->te_sp->setText("");
 		d->te_sp->setEnabled(false);
+		d->le_sp_priority->clear();
+		d->le_sp_priority->setEnabled(false);
+		d->cb_sp_status->setEnabled(false);
 
 		//noDirty = FALSE;
 		connect(d->te_sp, SIGNAL(textChanged()), SLOT(changeStatusPreset()));
+		connect(d->le_sp_priority, SIGNAL(textChanged(const QString&)), SLOT(changeStatusPreset()));
 		return;
 	}
 
 	d->pb_spDelete->setEnabled(true);
 
-	d->te_sp->setText( o->sp.get( d->lb_sp->text(x)) );
+	Options::StatusPreset preset = o->sp[d->lb_sp->text(x)];
+	d->te_sp->setText(preset.message());
 	d->te_sp->setEnabled(true);
+	if (preset.usePriority())
+		d->le_sp_priority->setText(QString::number(preset.priority()));
+	else
+		d->le_sp_priority->clear();
+	d->le_sp_priority->setEnabled(true);
+	int n;
+	for(n = 0; n < 7; ++n) {
+		if(preset.status() == combomap[n]) {
+			d->cb_sp_status->setCurrentItem(n);
+			break;
+		}
+	}
+	d->cb_sp_status->setEnabled(true);
 
 	//noDirty = FALSE;
 	connect(d->te_sp, SIGNAL(textChanged()), SLOT(changeStatusPreset()));
+	connect(d->le_sp_priority, SIGNAL(textChanged(const QString&)), SLOT(changeStatusPreset()));
 }
 
 void OptionsTabStatus::newStatusPreset()
@@ -186,13 +223,12 @@
 
 		if(text.isEmpty())
 			QMessageBox::information(parentWidget, tr("Error"), tr("Can't create a blank preset!"));
-		else if(o->sp.findByKey(text) != o->sp.end())
+		else if(!o->sp.contains(text))
 			QMessageBox::information(parentWidget, tr("Error"), tr("You already have a preset with that name!"));
 		else
 			break;
 	}
 
-	o->sp.set(text, "");
 	d->lb_sp->insertItem(text);
 	d->lb_sp->setSelected(d->lb_sp->count()-1, TRUE);
 	d->te_sp->setFocus();
@@ -209,7 +245,7 @@
 
 	emit dataChanged();
 
-	o->sp.unset(d->lb_sp->text(id));
+	o->sp.remove(d->lb_sp->text(id));
 	d->lb_sp->removeItem(id);
 
 	// select a new entry if possible
@@ -232,6 +268,12 @@
 	if(id == -1)
 		return;
 
-	o->sp.set(d->lb_sp->text(id), d->te_sp->text());
+	o->sp[d->lb_sp->text(id)].setMessage(d->te_sp->text());
+	if (d->le_sp_priority->text().isEmpty())
+		o->sp[d->lb_sp->text(id)].clearPriority();
+	else
+		o->sp[d->lb_sp->text(id)].setPriority(d->le_sp_priority->text().toInt());
+	o->sp[d->lb_sp->text(id)].setStatus(combomap[d->cb_sp_status->currentItem()]);
+
 	emit dataChanged();
 }
--- psi/src/common.h~	2004-08-21 16:11:22.615444592 +0200
+++ psi/src/common.h	2004-08-21 16:13:47.957349264 +0200
@@ -99,7 +99,37 @@
 
 	int defaultAction;
 	int incomingAs;
-	VarList sp; //status message presets
+        
+ 	class StatusPreset 
+ 	{
+ 		public:
+ 			StatusPreset();
+ 			StatusPreset(QString name, QString message = QString::null, int status = STATUS_AWAY);
+ 			StatusPreset(QString name, int priority, QString message = QString::null, int status = STATUS_AWAY);
+ 			StatusPreset(const QDomElement&);
+ 
+ 			QString name() const;
+ 			void setName(const QString&);
+ 			QString message() const;
+ 			void setMessage(const QString&);
+ 			int status() const;
+ 			void setStatus(int);
+ 			bool usePriority() const;
+ 			int priority() const;
+ 			void setPriority(int priority);
+ 			void clearPriority();
+ 
+ 			// XML
+ 			QDomElement toXml(QDomDocument&) const;
+ 			void fromXml(const QDomElement&);
+ 
+ 		private:
+ 			QString name_, message_;
+ 			int status_;
+ 			bool usePriority_;
+ 			int priority_;
+ 	};
+ 	QMap<QString,StatusPreset> sp; // Status message presets.
 	int recentStatusLimit;
 	bool storePresets;
 	QStringList recentStatus; //recent status messages
--- psi/src/psi_profiles.cpp~	2004-08-21 16:18:39.953959032 +0200
+++ psi/src/psi_profiles.cpp	2004-08-21 16:25:36.694604824 +0200
@@ -1413,9 +1413,16 @@
 				readEntry(tag, "message", &prefs.asMessage);
 			}
 
+			// Status presets
 			tag = findSubTag(p_pres, "statuspresets", &found);
-			if(found)
-				prefs.sp.fromXml(tag);
+			if(found) {
+				for(QDomNode n = tag.firstChild(); !n.isNull(); n = n.nextSibling()) {
+					Options::StatusPreset preset(n.toElement());
+					if (!preset.name().isEmpty())
+						prefs.sp[preset.name()] = preset;
+				}
+			}
+				
 			tag = findSubTag(p_pres, "recentstatus", &found);
 			if(found){
 				if(tag.hasAttribute("limit"))
--- psi/src/statusdlg.cpp~	2004-08-21 16:27:02.464565808 +0200
+++ psi/src/statusdlg.cpp	2004-08-21 16:29:43.020157648 +0200
@@ -263,13 +263,21 @@
 				break;
 		}
 		// Store preset
-		option.sp.set(text,d->te->text());
+		option.sp[text] = Options::StatusPreset(text,d->te->text());
+		if (!d->le_priority->text().isEmpty())
+			option.sp[text].setPriority(d->le_priority->text().toInt());
+		option.sp[text].setStatus(combomap[d->cb_type->currentItem()]);
 	} 
 
 	// Set status
 	int type = combomap[d->cb_type->currentItem()];
 	QString str = d->te->text();
 
+	if (d->le_priority->text().isEmpty())
+		set(makeStatus(type, str), false);
+	else
+		set(makeStatus(type, str, d->le_priority->text().toInt()), true);
+
 	// save recent if not saved yet else bring to front
 	if(!str.isEmpty()){
 		option.recentStatus.remove(str);
